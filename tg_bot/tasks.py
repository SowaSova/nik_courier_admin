import logging

import requests
from aiogram import Bot, exceptions
from aiogram.types import FSInputFile
from asgiref.sync import async_to_sync
from celery import shared_task
from celery.exceptions import MaxRetriesExceededError
from django.conf import settings
from django.db.models import Q
from django.utils import timezone

from adminpanel.constants import ProcessingApplicationType
from apps.applications.models import ProcessingApplication
from apps.broadcast.models import BroadcastMessage
from apps.users.models import TelegramChannel, TelegramUser

logger = logging.getLogger(__name__)


@shared_task
def send_to_bitrix(application_id):
    from applications.models import Document, ProcessingApplication

    from tg_bot.utils.bitrix import (
        attach_files_to_deal,
        create_lead_in_bitrix,
        get_deal_id_from_lead,
        upload_documents_to_bitrix,
    )

    try:
        application = ProcessingApplication.objects.get(id=application_id)
    except ProcessingApplication.DoesNotExist:
        logger.error(f"–ó–∞—è–≤–∫–∞ —Å id {application_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –°–æ–∑–¥–∞–µ–º –ª–∏–¥
    lead_id = create_lead_in_bitrix(application)

    if lead_id:
        application.bitrix_lead_id = lead_id
        application.save()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        has_documents = Document.objects.filter(application=application).exists()

        if has_documents:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –ø–æ–ª—É—á–∞–µ–º –∏—Ö IDs
            file_ids = upload_documents_to_bitrix(application)

            # –ü–æ–ª—É—á–∞–µ–º ID —Å–¥–µ–ª–∫–∏, —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∏–∑ –ª–∏–¥–∞
            deal_id = get_deal_id_from_lead(lead_id)
            if deal_id:
                # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª—ã –∫ —Å–¥–µ–ª–∫–µ
                attach_files_to_deal(deal_id, file_ids)
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–¥–µ–ª–∫–∏ –¥–ª—è –ª–∏–¥–∞ {lead_id}.")
        else:
            logger.error("–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–∏–¥ –≤ –ë–∏—Ç—Ä–∏–∫—Å24.")


@shared_task(bind=True, max_retries=3)
def send_notification_to_channels(self, application_id):
    try:
        application = ProcessingApplication.objects.get(id=application_id)
    except ProcessingApplication.DoesNotExist:
        logger.error(f"–ó–∞—è–≤–∫–∞ —Å id {application_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    full_name = application.full_name
    phone_number = application.phone_number
    appointment_date = (
        application.invited_date.strftime("%d-%m-%Y")
        if application.invited_date
        else "N/A"
    )
    source = ProcessingApplicationType(application.source).label
    message_text = (
        f"üìù ‚ùó–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚ùó\n\n"
        f"–§–ò–û: {full_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
        f"–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: {appointment_date}\n"
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: {source}"
    )

    url = f"https://api.telegram.org/bot{settings.BOT_TOKEN}/sendMessage"
    telegram_channels = TelegramChannel.objects.all()
    if not telegram_channels.exists():
        logger.error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ Telegram.")
        return
    for chat_id in telegram_channels.values_list("chat_id", flat=True):
        payload = {
            "chat_id": chat_id,
            "text": str(message_text),
        }
        try:
            response = requests.post(url, data=payload, timeout=10)
            response.raise_for_status()
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {chat_id}.")
        except requests.exceptions.RequestException as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª {chat_id}: {e}")
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
            status_code = getattr(e.response, "status_code", None)
            response_text = getattr(e.response, "text", "")

            if status_code:
                logger.error(f"–û—Ç–≤–µ—Ç Telegram API: {response_text}")
            else:
                logger.error("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram API.")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –∏ —Ä–µ—à–∞–µ–º, –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ª–∏ –ø–æ–ø—ã—Ç–∫—É
            if status_code in [500, 502, 503, 504, 404]:
                # –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                try:
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
                    raise self.retry(exc=e, countdown=300)
                except MaxRetriesExceededError:
                    logger.error(
                        f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª {chat_id}."
                    )
            elif status_code == 429:
                # –ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
                retry_after = int(e.response.headers.get("Retry-After", 60))
                try:
                    raise self.retry(exc=e, countdown=retry_after)
                except MaxRetriesExceededError:
                    logger.error(
                        f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª {chat_id} –ø–æ—Å–ª–µ 429 Too Many Requests."
                    )
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
                logger.error(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {chat_id}, –∫–æ–¥ –æ—à–∏–±–∫–∏: {status_code}"
                )
            continue


@shared_task
def send_scheduled_messages():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    bot = Bot(token=settings.BOT_TOKEN)

    now = timezone.now()
    messages_to_send = list(
        BroadcastMessage.objects.filter(Q(scheduled_time__lte=now) & Q(is_sent=False))
    )
    if not messages_to_send:
        logging.info("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        async_to_sync(bot.session.close)()
        return
    users = list(TelegramUser.objects.all())

    for message in messages_to_send:
        for user in users:
            try:
                if message.attachments:
                    file = FSInputFile(message.attachments.path)
                    async_to_sync(bot.send_document)(
                        chat_id=user.telegram_id,
                        document=file,
                        caption=message.message_text,
                    )
                else:
                    async_to_sync(bot.send_message)(
                        chat_id=user.telegram_id, text=message.message_text
                    )
            except exceptions.TelegramAPIError as e:
                logging.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}"
                )
            except Exception as e:
                logging.error(
                    f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}"
                )

        message.is_sent = True
        message.save()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    async_to_sync(bot.session.close)()


@shared_task
def finalize_application_task(application_id):
    from applications.models import ProcessingApplication

    application = ProcessingApplication.objects.get(id=application_id)
    if not application.is_finalized:
        # –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É
        application.is_finalized = True
        application.save()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–∏—Ç—Ä–∏–∫—Å
        send_to_bitrix.delay(application.id)
